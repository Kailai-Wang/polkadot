// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-05-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_democracy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --output=./frame/democracy/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_democracy.
pub trait WeightInfo {
	fn propose() -> Weight;
	fn second() -> Weight;
	fn vote_new() -> Weight;
	fn vote_existing() -> Weight;
	fn emergency_cancel() -> Weight;
	fn blacklist() -> Weight;
	fn external_propose() -> Weight;
	fn external_propose_majority() -> Weight;
	fn external_propose_default() -> Weight;
	fn fast_track() -> Weight;
	fn veto_external() -> Weight;
	fn cancel_proposal() -> Weight;
	fn cancel_referendum() -> Weight;
	fn cancel_queued() -> Weight;
	fn on_initialize_base(_r: u32,) -> Weight;
	fn on_initialize_base_with_launch_period(_r: u32,) -> Weight;
	fn delegate(_v: u32) -> Weight;
	fn undelegate(_v: u32) -> Weight;
	fn clear_public_proposals() -> Weight;
	fn unlock_remove() -> Weight;
	fn unlock_set() -> Weight;
	fn remove_vote() -> Weight;
	fn remove_other_vote() -> Weight;
}

pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn propose() -> Weight { Weight::zero() }
	fn second() -> Weight { Weight::zero() }
	fn vote_new() -> Weight { Weight::zero() }
	fn vote_existing() -> Weight { Weight::zero() }
	fn emergency_cancel() -> Weight { Weight::zero() }
	fn blacklist() -> Weight { Weight::zero() }
	fn external_propose() -> Weight { Weight::zero() }
	fn external_propose_majority() -> Weight { Weight::zero() }
	fn external_propose_default() -> Weight { Weight::zero() }
	fn fast_track() -> Weight { Weight::zero() }
	fn veto_external() -> Weight { Weight::zero() }
	fn cancel_proposal() -> Weight { Weight::zero() }
	fn cancel_referendum() -> Weight { Weight::zero() }
	fn cancel_queued() -> Weight { Weight::zero() }
	fn on_initialize_base(_r: u32,) -> Weight { Weight::zero() }
	fn on_initialize_base_with_launch_period(_r: u32,) -> Weight { Weight::zero() }
	fn delegate(_v: u32) -> Weight { Weight::zero() }
	fn undelegate(_v: u32) -> Weight { Weight::zero() }
	fn clear_public_proposals() -> Weight { Weight::zero() }
	fn unlock_remove() -> Weight { Weight::zero() }
	fn unlock_set() -> Weight { Weight::zero() }
	fn remove_vote() -> Weight { Weight::zero() }
	fn remove_other_vote() -> Weight { Weight::zero() }
}

impl WeightInfo for () {
	fn propose() -> Weight { Weight::zero() }
	fn second() -> Weight { Weight::zero() }
	fn vote_new() -> Weight { Weight::zero() }
	fn vote_existing() -> Weight { Weight::zero() }
	fn emergency_cancel() -> Weight { Weight::zero() }
	fn blacklist() -> Weight { Weight::zero() }
	fn external_propose() -> Weight { Weight::zero() }
	fn external_propose_majority() -> Weight { Weight::zero() }
	fn external_propose_default() -> Weight { Weight::zero() }
	fn fast_track() -> Weight { Weight::zero() }
	fn veto_external() -> Weight { Weight::zero() }
	fn cancel_proposal() -> Weight { Weight::zero() }
	fn cancel_referendum() -> Weight { Weight::zero() }
	fn cancel_queued() -> Weight { Weight::zero() }
	fn on_initialize_base(_r: u32,) -> Weight { Weight::zero() }
	fn on_initialize_base_with_launch_period(_r: u32,) -> Weight { Weight::zero() }
	fn delegate(_v: u32) -> Weight { Weight::zero() }
	fn undelegate(_v: u32) -> Weight { Weight::zero() }
	fn clear_public_proposals() -> Weight { Weight::zero() }
	fn unlock_remove() -> Weight { Weight::zero() }
	fn unlock_set() -> Weight { Weight::zero() }
	fn remove_vote() -> Weight { Weight::zero() }
	fn remove_other_vote() -> Weight { Weight::zero() }
}
